gain = np.arange(10, 30, 2.0)
cutoff = np.arange(0.3, 1.0, 0.1)
results = []

blobAlg = blobRadiusAlg()

###### THRESHOLDING INSPECTION ########
imagesNum = images.shape[0]
targetImagesNum = 546
targetImages = []
blobTargetImages = []
resultFilenames = []
# result = []
for i in range(imagesNum):
    if i % 200 == 0: print(".", end="") 

    resultImage, algResult = blobAlg.blobAlgorithm(images[i,:,:], distances[i])

    if imageIndexes[i] <= markerPresentIndex[distances[i]]:
        # result.append(algResult)
        # Image contains valid marker       
        if algResult >= 4: 
            targetImages.append(images[i,:,:])
            blobTargetImages.append(resultImage)
            resultFilenames.append(filenames[i])

# for j in range(max(result)+1):
#     print(j, ": ", result.count(j))
targetImages = np.array(targetImages)
blobTargetImages = np.array(blobTargetImages)

for i in range(len(targetImages)):
    imsave(os.path.join(pathBCorrect, filenames[i]), targetImages[i])

#for i in range(0, len(targetImages), 25):
#    if i + 25 < targetImagesNum:
#        showImages(targetImages[i:i+25,:,:], 5, 5, str(i) + ' - ' + str(i+25))
#        showImages(blobTargetImages[i:i+25,:,:], 5, 5, str(i) + ' - ' + str(i+25))
#    else:
#        showImages(targetImages[i:targetImagesNum,:,:], 5, 5, str(i) + ' - ' + str(targetImagesNum))
#        showImages(blobTargetImages[i:targetImagesNum,:,:], 5, 5, str(i) + ' - ' + str(targetImagesNum))

# imagesNum = images.shape[0]
# resultImages = np.zeros((imagesNum, 120, 160))
# print("Contrast correction test: sigmoid adjust")
# for k in range(len(cutoff)):
#     for l in range(len(gain)):
#         result = []
#         currCutoff = cutoff[k]
#         currGain = gain[l]
#         print("################ Cutoff: ", currCutoff, ", gain: ", currGain, " ################")
#         for i in range(imagesNum):
#             if i % 200 == 0: print(".", end="") 
#             resultImage, algResult = blobAlg.blobAlgorithm(images[i,:,:], distances[i], currGain, currCutoff)
# 
#             resultImages[i,:,:] = resultImage
#             if imageIndexes[i] <= markerPresentIndex[distances[i]]:
#                 # Image contains valid marker        
#                 result.append(algResult)
#         print("")
#         for j in range(max(result)+1):
#             print(j, ": ", result.count(j))
        #results.append(result)

#for k in range(len(multipliers)):
    #for l in range(len(offsets)):
       # print("################ offset: ", offsets[l], ", multiplier: ", multipliers[k], " ################")
        #for j in range(max(results[k*len(multipliers)+l])+1):
            #print(j, ": ", results[k*len(multipliers)+l].count(j))




############################################################################################# CONSTANT AREA AND LOW BOUND TESTS #####################################################################################################
markerPresentIndex = {2.0: 40, 25.0: 80, 3.0: 79, 35.0: 80, 4.0: 80, 45.0: 80, 5.0: 80, 55.0: 80}

blobAlg = blobRadiusAlg()

areas = np.arange(370, 391, 10)
areaLowMult = [0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14, 0.16, 0.18, 0.20] 
areaLowVal = [2, 4, 6, 8, 10, 20, 30, 40, 50, 60, 70]
detectebBlobs = []
blobCounts = []
for i in range(len(areas)):    
    for j in range(len(areaLowMult)):
        print("############ area: ", areas[i], " low bound multiplier: ", areaLowMult[j], " ############", end="")
        blobNum = []
        for k in range(len(images)):
            if k % 200 == 0: print(".", end="")
            tmpBlobNum = blobAlg.blobAlgorithm(images[k], distances[k], areas[i], areaLowMult[j], "Mult")
            
            if imageIndexes[k] <= markerPresentIndex[distances[k]]:
                blobNum.append(tmpBlobNum)
        print("")
        blobNum = np.array(blobNum, dtype=int)
        detectebBlobs.append(blobNum)
        counts = np.bincount(blobNum)
        blobCounts.append(counts)
        for k in range(counts.shape[0]):
            print(k, ": ", counts[k])

for i in range(len(areas)):    
    for j in range(len(areaLowVal)):
        print("############ area: ", areas[i], " low bound value: ", areaLowVal[j], " ############", end="")
        blobNum = []
        for k in range(len(images)):
            if k % 200 == 0: print(".", end="")
            tmpBlobNum = blobAlg.blobAlgorithm(images[k], distances[k])
            
            if imageIndexes[k] <= markerPresentIndex[distances[k]]:
                blobNum.append(tmpBlobNum)
        print("")
        blobNum = np.array(blobNum, dtype=int)
        detectebBlobs.append(blobNum)
        counts = np.bincount(blobNum)
        blobCounts.append(counts)
        for k in range(counts.shape[0]):
            print(k, ": ", counts[k])

detectebBlobs = unevenVectorsToArray(detectebBlobs)
detectebBlobs = detectebBlobs.astype(int)
blobCounts = unevenVectorsToArray(blobCounts)
blobCounts = blobCounts.astype(int)
np.savetxt(os.path.join(testDataPath, 'Cumulative_Thres_Area_Low_Bound_raw.csv'), detectebBlobs, delimiter=',', fmt="%d")
np.savetxt(os.path.join(testDataPath, 'Cumulative_Thres_Area_Low_Bound_counts.csv'), blobCounts, delimiter=',', fmt="%d")

