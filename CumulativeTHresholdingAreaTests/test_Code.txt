gain = np.arange(10, 30, 2.0)
cutoff = np.arange(0.3, 1.0, 0.1)
results = []

blobAlg = blobRadiusAlg()

###### THRESHOLDING INSPECTION ########
imagesNum = images.shape[0]
targetImagesNum = 546
targetImages = []
blobTargetImages = []
resultFilenames = []
# result = []
for i in range(imagesNum):
    if i % 200 == 0: print(".", end="") 

    resultImage, algResult = blobAlg.blobAlgorithm(images[i,:,:], distances[i])

    if imageIndexes[i] <= markerPresentIndex[distances[i]]:
        # result.append(algResult)
        # Image contains valid marker       
        if algResult >= 4: 
            targetImages.append(images[i,:,:])
            blobTargetImages.append(resultImage)
            resultFilenames.append(filenames[i])

# for j in range(max(result)+1):
#     print(j, ": ", result.count(j))
targetImages = np.array(targetImages)
blobTargetImages = np.array(blobTargetImages)

for i in range(len(targetImages)):
    imsave(os.path.join(pathBCorrect, filenames[i]), targetImages[i])

#for i in range(0, len(targetImages), 25):
#    if i + 25 < targetImagesNum:
#        showImages(targetImages[i:i+25,:,:], 5, 5, str(i) + ' - ' + str(i+25))
#        showImages(blobTargetImages[i:i+25,:,:], 5, 5, str(i) + ' - ' + str(i+25))
#    else:
#        showImages(targetImages[i:targetImagesNum,:,:], 5, 5, str(i) + ' - ' + str(targetImagesNum))
#        showImages(blobTargetImages[i:targetImagesNum,:,:], 5, 5, str(i) + ' - ' + str(targetImagesNum))

# imagesNum = images.shape[0]
# resultImages = np.zeros((imagesNum, 120, 160))
# print("Contrast correction test: sigmoid adjust")
# for k in range(len(cutoff)):
#     for l in range(len(gain)):
#         result = []
#         currCutoff = cutoff[k]
#         currGain = gain[l]
#         print("################ Cutoff: ", currCutoff, ", gain: ", currGain, " ################")
#         for i in range(imagesNum):
#             if i % 200 == 0: print(".", end="") 
#             resultImage, algResult = blobAlg.blobAlgorithm(images[i,:,:], distances[i], currGain, currCutoff)
# 
#             resultImages[i,:,:] = resultImage
#             if imageIndexes[i] <= markerPresentIndex[distances[i]]:
#                 # Image contains valid marker        
#                 result.append(algResult)
#         print("")
#         for j in range(max(result)+1):
#             print(j, ": ", result.count(j))
        #results.append(result)

#for k in range(len(multipliers)):
    #for l in range(len(offsets)):
       # print("################ offset: ", offsets[l], ", multiplier: ", multipliers[k], " ################")
        #for j in range(max(results[k*len(multipliers)+l])+1):
            #print(j, ": ", results[k*len(multipliers)+l].count(j))