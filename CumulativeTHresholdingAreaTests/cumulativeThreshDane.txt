Zmiana mno≈ºnika powierzchni:
############  0.1 :
0 :  1048
############  0.30000000000000004 :
0 :  1024
1 :  24
############  0.5000000000000001 :
0 :  921
1 :  127
############  0.7000000000000001 :
0 :  577
1 :  319
2 :  152
############  0.9000000000000001 :
0 :  210
1 :  398
2 :  438
3 :  2
############  1.1000000000000003 :
0 :  7
1 :  249
2 :  641
3 :  151
############  1.3000000000000003 :
0 :  0
1 :  45
2 :  466
3 :  499
4 :  38
############  1.5000000000000004 :
0 :  0
1 :  46
2 :  260
3 :  497
4 :  245
############  1.7000000000000004 :
0 :  34
1 :  25
2 :  222
3 :  367
4 :  400
############  1.9000000000000004 :
0 :  64
1 :  6
2 :  214
3 :  281
4 :  483
############  2.0 :
0 :  72
1 :  3
2 :  206
3 :  267
4 :  500
############  2.2 :
0 :  72
1 :  25
2 :  198
3 :  254
4 :  499
############  2.4000000000000004 :
0 :  73
1 :  56
2 :  173
3 :  257
4 :  489
############  2.6000000000000005 :
0 :  75
1 :  94
2 :  152
3 :  268
4 :  459
############  2.8000000000000007 :
0 :  75
1 :  132
2 :  152
3 :  276
4 :  413
############  3.000000000000001 :
0 :  76
1 :  151
2 :  211
3 :  278
4 :  332
############  3.200000000000001 :
0 :  82
1 :  174
2 :  297
3 :  230
4 :  265
############  3.4000000000000012 :
0 :  86
1 :  214
2 :  371
3 :  177
4 :  200
############  3.6000000000000014 :
0 :  115
1 :  190
2 :  433
3 :  148
4 :  162
############  3.8000000000000016 :
0 :  129
1 :  180
2 :  503
3 :  116
4 :  120
############  4.000000000000002 :
0 :  141
1 :  175
2 :  535
3 :  100
4 :  97

Kod do tesowania:
# maximum image IDs that contain valid markers
#          Distances: 2          25         3          35         4          45         5          55
markerPresentIndex = {300.0: 40, 375.0: 80, 450.0: 79, 525.0: 80, 600.0: 80, 675.0: 80, 750.0: 80, 825.0: 80}
multipliers = np.arange(0.1, 2.1, 0.2)
results = []

blobAlg = blobRadiusAlg()

for k in range(len(multipliers)):
    result = []
    print("#######################################")
    for i in range(images.shape[0]):
        if i%300 == 0: print(".")
        algResult = blobAlg.blobAlgorithm(images[i,:,:], distances[i], multipliers[k])

        if imageIndexes[i] <= markerPresentIndex[distances[i]]:
            # Image contains valid marker        
            result.append(algResult)

    results.append(result)

for i in range(len(results)):
    print("############ ", multipliers[i], ":")
    for j in range(max(results[i])+1):
        print(j, ": ", results[i].count(j))

Zmiana offsetu thresholdu:
############  0 :
0 :  72
1 :  3
2 :  206
3 :  267
4 :  500
############  10 :
0 :  37
1 :  25
2 :  236
3 :  432
4 :  318
############  20 :
0 :  6
1 :  156
2 :  516
3 :  343
4 :  27
############  30 :
0 :  278
1 :  306
2 :  378
3 :  86
############  40 :
0 :  616
1 :  157
2 :  268
3 :  7
############  50 :
0 :  776
1 :  111
2 :  160
3 :  1
############  60 :
0 :  870
1 :  101
2 :  77
############  70 :
0 :  942
1 :  85
2 :  21
############  80 :
0 :  1000
1 :  48
############  90 :
0 :  1018
1 :  30

Kod do testowania:
# maximum image IDs that contain valid markers
#          Distances: 2          25         3          35         4          45         5          55
markerPresentIndex = {300.0: 40, 375.0: 80, 450.0: 79, 525.0: 80, 600.0: 80, 675.0: 80, 750.0: 80, 825.0: 80}
offsets = range(0, 100, 10)
results = []

blobAlg = blobRadiusAlg()

for k in range(len(offsets)):
    result = []
    print("#######################################")
    for i in range(images.shape[0]):
        if i%300 == 0: print(".") 
        algResult = blobAlg.blobAlgorithm(images[i,:,:], distances[i], offsets[k])

        if imageIndexes[i] <= markerPresentIndex[distances[i]]:
            # Image contains valid marker        
            result.append(algResult)

    results.append(result)

for i in range(len(results)):
    print("############ ", offsets[i], ":")
    for j in range(max(results[i])+1):
        print(j, ": ", results[i].count(j))